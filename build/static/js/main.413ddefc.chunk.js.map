{"version":3,"sources":["proxy.ts","utils/eventproducer.ts","utils/textinput.tsx","components/login.tsx","components/conversationcard.tsx","components/textinputandbutton.tsx","components/leftpane.tsx","components/messagecard.tsx","components/rightpane.tsx","components/main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","displayNameRef","React","createRef","sendPacket","staySignedIn","src","width","setSecret","onClick","ref","href","preventDefault","current","forceUpdate","console","log","ConversationCard","m","removeAllEventListener","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleTimeString","content","TextInputAndButton","textInput","buttonContent","LeftPane","c","firstMessage","user","tag","text","sendContactRequest","map","key","selectedConversation","MessageCard","own","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.413ddefc.chunk.js","sourcesContent":["import { InboxDto, MessageDto, IncomingPacket, OutgoingPacket } from \"./interfaces/chat\";\r\nimport {EventProducer} from \"./utils/eventproducer\";\r\n\r\ninterface ProxyEventMap {\r\n    \"login\": () => void;\r\n    \"message\": (channelId: string, message: MessageDto) => void;\r\n    \"conversation\": (channelId: string) => void;\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>{\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n        this.ws.addEventListener(\"open\", () => {\r\n            \r\n        });\r\n        this.ws.addEventListener(\"message\", e => { \r\n            let p = <IncomingPacket>JSON.parse( e.data );\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message );\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch( \"conversation\", p.conversation.channelId );\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    sendPacket( packet: OutgoingPacket )\r\n    {\r\n        this.ws.send( JSON.stringify( packet ) );\r\n    }\r\n}\r\nexport var proxy = new Proxy();","export class EventProducer<M> {\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n\r\n    addEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object ) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n\r\n    removeEventListener<K extends keyof M>( type: K, listener: M[ K ] ) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n\r\n    protected dispatch<K extends keyof M>(type: K, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n\r\n\r\n}","import React, { Component } from 'react';\r\nimport './textinput.css'\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    state = { value: this.props.value, focus: false };\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })}\r\n                    {...attrs} />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {proxy} from '../proxy';\r\nimport {TextInput} from '../utils/textinput';\r\n\r\n\r\nexport class Login extends Component {\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n    displayNameRef: any;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.displayNameRef = React.createRef<TextInput>();\r\n    }\r\n\r\n    onClick()\r\n    {\r\n        if ( this.state.register )\r\n            proxy.sendPacket( { type: \"register\", email: this.state.email, password: this.state.password, displayName: this.state.displayName, staySignedIn: false } );\r\n        else\r\n            proxy.sendPacket( { type: \"login\", email: this.state.email, password: this.state.password, staySignedIn: false } );\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={ this.state.email }\r\n                    onChange={ e => this.setSecret(e) } onEnter={ () => this.onClick() } autofocus={ true } />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={ this.state.password }\r\n                    onChange={ e => this.setState( { password: e } ) } onEnter={ () => this.onClick() } />\r\n                { this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={ this.state.displayName }\r\n                        onChange={ e => this.setState( { displayName: e} ) } onEnter={ () => this.onClick() } ref={this.displayNameRef} /> }\r\n                <button type=\"button\" onClick={ () => this.onClick() }>\r\n                    { this.state.register ? \"Register\" : \"Login\" }\r\n                </button>\r\n                <p>{ this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\r\n                    <a href=\"\" onClick={ e => { e.preventDefault(); this.setState( { register: !this.state.register } ); } }>\r\n                        { this.state.register ? \"Login\" : \"Register\" }\r\n                    </a>\r\n                </p>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div> );\r\n    }\r\n\r\n    setSecret(e: string) {\r\n        if (this.state.register === true) {\r\n            if (e === \"F262M8\") {\r\n                this.setState({ email: e, displayName: \"Ricsi\" });\r\n                this.displayNameRef.current.state.value = \"Ricsi\";\r\n                this.forceUpdate();\r\n                console.log(this.state.email);\r\n                console.log(this.state.displayName);\r\n            }\r\n        }\r\n        this.setState({ email: e });\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from \"../proxy\"\r\nimport { ConversationDto } from '../interfaces/chat';\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")} onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"date\">{lastMessage && new Date(lastMessage.timeStamp).toLocaleTimeString()}</span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { TextInput, TextInputOptions } from '../utils/textinput';\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions\r\n{\r\n    buttonContent?: string;\r\n    onClick?: ( text: string ) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick()\r\n    {\r\n        if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) )\r\n            this.textInput.current?.setState( { value: \"\" } );\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput { ...this.props } ref={ this.textInput } onEnter={ () => this.onClick() } />\r\n                <button type=\"button\" onClick={ () => this.onClick() }>{ this.props.buttonContent }</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from '../proxy';\r\nimport { ConversationCard } from './conversationcard';\r\nimport { InboxDto, ConversationDto } from '../interfaces/chat';\r\nimport { TextInputAndButton } from './textinputandbutton';\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: ( c: ConversationDto ) => void\r\n}>\r\n{\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"conversation\", c => this.forceUpdate(), this );\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n\r\n    sendContactRequest( email: string )\r\n    {\r\n        proxy.sendPacket( { type: \"contactRequest\", email, firstMessage: \"Hello\" } );\r\n        return true;\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\" buttonContent=\"Inv\"\r\n                    onClick={ text => this.sendContactRequest( text ) } />\r\n                <div className=\"conversations\">\r\n                    { this.props.inbox.conversations.map( x =>\r\n                        <ConversationCard\r\n                            key={ x.channelId }\r\n                            conversation={ x }\r\n                            selected={ x === this.props.selectedConversation }\r\n                            onSelect={ () => this.props.onSelect( x ) } /> ) }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport { MessageDto } from '../interfaces/chat';\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className={ \"message-card\" + ( this.props.own ? \" own\" : \"\" ) }>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{ this.props.message.content }</span>\r\n                    <span className=\"time\">{ new Date( this.props.message.timeStamp ).toLocaleTimeString() }</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { proxy } from '../proxy';\r\nimport { MessageCard } from './messagecard';\r\nimport { ConversationDto } from '../interfaces/chat';\r\nimport { TextInputAndButton } from './textinputandbutton';\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"message\", ( cid, m ) =>\r\n        {\r\n            if ( cid === this.props.conversation?.channelId )\r\n                this.forceUpdate();\r\n        }, this );\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n\r\n    onSend( text: string )\r\n    {\r\n        proxy.sendPacket( { type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"F: \" + text } );\r\n        return true;\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                { this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\" onClick={ () => this.props.onBack() }>Back</button>\r\n                            <p>{ this.props.conversation?.name }</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            { this.props.conversation?.lastMessages.map( x =>\r\n                                <MessageCard key={ x.id } message={ x } own={ x.senderId === proxy.inbox?.user.id } /> ) }\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\" buttonContent=\"Send\" onClick={ x => this.onSend( x ) } />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {proxy} from '../proxy';\r\nimport {LeftPane} from './leftpane';\r\nimport {RightPane} from './rightpane';\r\nimport {ConversationDto} from '../interfaces/chat';\r\n\r\nexport class Main extends Component {\r\n\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n    \r\n    render() {\r\n        let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\r\n        return (\r\n            <div className={className}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                onBack={ () => this.setState( { selectedConversation: undefined } ) } />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport { Login } from './components/login';\nimport { Main } from './components/main';\nimport { proxy } from './proxy';\n\nexport default class App extends Component\n{\n  state = { showLogin: true };\n\n  componentDidMount()\n  {\n    proxy.addEventListener( \"login\", () => { this.setState( { showLogin: false } ) } );\n  }\n\n  render()\n  {\n    return (\n      <div className=\"app\">\n        { this.state.showLogin ? <Login /> : <Main /> }\n      </div>\n    );\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}